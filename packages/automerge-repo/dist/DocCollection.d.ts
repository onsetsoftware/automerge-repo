import EventEmitter from "eventemitter3";
import { DocHandle } from "./DocHandle.js";
import { type DocumentId } from "./types.js";
import { type SharePolicy } from "./Repo.js";
/**
 * A DocCollection is a collection of DocHandles. It supports creating new documents and finding
 * documents by ID.
 * */
export declare class DocCollection extends EventEmitter<DocCollectionEvents> {
    #private;
    /** By default, we share generously with all peers. */
    sharePolicy: SharePolicy;
    constructor();
    /** Returns all the handles we have cached. */
    get handles(): Record<DocumentId, DocHandle<any>>;
    /**
     * Creates a new document and returns a handle to it. The initial value of the document is
     * an empty object `{}`. Its documentId is generated by the system. we emit a `document` event
     * to advertise interest in the document.
     */
    create<T>(): DocHandle<T>;
    /**
     * Retrieves a document by id. It gets data from the local system, but also emits a `document`
     * event to advertise interest in the document.
     */
    find<T>(
    /** The documentId of the handle to retrieve */
    documentId: DocumentId): DocHandle<T>;
    delete(
    /** The documentId of the handle to delete */
    documentId: DocumentId): void;
}
interface DocCollectionEvents {
    document: (arg: DocumentPayload) => void;
    "delete-document": (arg: DeleteDocumentPayload) => void;
}
interface DocumentPayload {
    handle: DocHandle<any>;
}
interface DeleteDocumentPayload {
    documentId: DocumentId;
}
export {};
//# sourceMappingURL=DocCollection.d.ts.map